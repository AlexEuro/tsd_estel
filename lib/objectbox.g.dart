// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'model/orders.dart';
import 'model/products.dart';
import 'model/warehouse.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 4304724916667015854),
      name: 'TovarDetail',
      lastPropertyId: const IdUid(8, 4151892562979858137),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2879185971574498140),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4701235605609955393),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5128338598487419096),
            name: 'naim',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2764840503465411133),
            name: 'ed',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3236544610871054136),
            name: 'sh',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 4832911136025939858)),
        ModelProperty(
            id: const IdUid(6, 4318451834241312975),
            name: 'cod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 718640889729493807),
            name: 'art',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4151892562979858137),
            name: 'inPack',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 7865686015255139639),
      name: 'ItemModel',
      lastPropertyId: const IdUid(6, 8638696063699723444),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4846462559062455178),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2245131223248252927),
            name: 'itemName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7187576993885623324),
            name: 'itemCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9072381108795352534),
            name: 'orderModelId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 4538368992845807142),
            relationTarget: 'OrderModel'),
        ModelProperty(
            id: const IdUid(5, 8463883531267366558),
            name: 'sh',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8638696063699723444),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1035935039992077224),
      name: 'OrderModel',
      lastPropertyId: const IdUid(5, 4713609547231897078),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8790534327641745547),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4245673108810367446),
            name: 'ordered',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1545556014793902598),
            name: 'dateDoc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7892275245849358768),
            name: 'user',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4713609547231897078),
            name: 'isSend',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'items', srcEntity: 'ItemModel', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(8, 5048923316842701673),
      name: 'WarehoseModel',
      lastPropertyId: const IdUid(3, 5054978627514725968),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4346299859100652101),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6016311282553156001),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5054978627514725968),
            name: 'naim',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 5048923316842701673),
      lastIndexId: const IdUid(3, 4538368992845807142),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        2843137606981206170,
        2951546399477514165,
        6015077569082527311,
        4632691237960483433
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6353778055886196502,
        5403566294848047219,
        8028213615140867069,
        8458409687519734795,
        4116218598716315319,
        3546925273186852158,
        4876312182464825867,
        2026129668401485967,
        8139272876594537419,
        5487142237138569586,
        1004307156911162246,
        7913652677828231474,
        3684787499429182579,
        3642768633567617344
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TovarDetail: EntityDefinition<TovarDetail>(
        model: _entities[0],
        toOneRelations: (TovarDetail object) => [],
        toManyRelations: (TovarDetail object) => {},
        getId: (TovarDetail object) => object.id,
        setId: (TovarDetail object, int id) {
          object.id = id;
        },
        objectToFB: (TovarDetail object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final naimOffset = fbb.writeString(object.naim);
          final edOffset = fbb.writeString(object.ed);
          final shOffset = fbb.writeString(object.sh);
          final codOffset = fbb.writeString(object.cod);
          final artOffset = fbb.writeString(object.art);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, naimOffset);
          fbb.addOffset(3, edOffset);
          fbb.addOffset(4, shOffset);
          fbb.addOffset(5, codOffset);
          fbb.addOffset(6, artOffset);
          fbb.addInt64(7, object.inPack);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TovarDetail(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              naim: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              art: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              inPack:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              ed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              sh: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              cod: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));

          return object;
        }),
    ItemModel: EntityDefinition<ItemModel>(
        model: _entities[1],
        toOneRelations: (ItemModel object) => [object.orderModel],
        toManyRelations: (ItemModel object) => {},
        getId: (ItemModel object) => object.id,
        setId: (ItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (ItemModel object, fb.Builder fbb) {
          final itemNameOffset = fbb.writeString(object.itemName);
          final shOffset = fbb.writeString(object.sh);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, itemNameOffset);
          fbb.addInt64(2, object.itemCount);
          fbb.addInt64(3, object.orderModel.targetId);
          fbb.addOffset(4, shOffset);
          fbb.addOffset(5, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ItemModel(
              sh: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              itemCount:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              itemName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.orderModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.orderModel.attach(store);
          return object;
        }),
    OrderModel: EntityDefinition<OrderModel>(
        model: _entities[2],
        toOneRelations: (OrderModel object) => [],
        toManyRelations: (OrderModel object) => {
              RelInfo<ItemModel>.toOneBacklink(4, object.id,
                  (ItemModel srcObject) => srcObject.orderModel): object.items
            },
        getId: (OrderModel object) => object.id,
        setId: (OrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          final dateDocOffset = fbb.writeString(object.dateDoc);
          final userOffset = fbb.writeString(object.user);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.ordered);
          fbb.addOffset(2, dateDocOffset);
          fbb.addOffset(3, userOffset);
          fbb.addBool(4, object.isSend);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderModel(
              dateDoc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              user: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..ordered =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..isSend =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          InternalToManyAccess.setRelInfo(
              object.items,
              store,
              RelInfo<ItemModel>.toOneBacklink(
                  4, object.id, (ItemModel srcObject) => srcObject.orderModel),
              store.box<OrderModel>());
          return object;
        }),
    WarehoseModel: EntityDefinition<WarehoseModel>(
        model: _entities[3],
        toOneRelations: (WarehoseModel object) => [],
        toManyRelations: (WarehoseModel object) => {},
        getId: (WarehoseModel object) => object.id,
        setId: (WarehoseModel object, int id) {
          object.id = id;
        },
        objectToFB: (WarehoseModel object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final naimOffset = fbb.writeString(object.naim);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, naimOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WarehoseModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              naim: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TovarDetail] entity fields to define ObjectBox queries.
class TovarDetail_ {
  /// see [TovarDetail.id]
  static final id =
      QueryIntegerProperty<TovarDetail>(_entities[0].properties[0]);

  /// see [TovarDetail.uid]
  static final uid =
      QueryStringProperty<TovarDetail>(_entities[0].properties[1]);

  /// see [TovarDetail.naim]
  static final naim =
      QueryStringProperty<TovarDetail>(_entities[0].properties[2]);

  /// see [TovarDetail.ed]
  static final ed =
      QueryStringProperty<TovarDetail>(_entities[0].properties[3]);

  /// see [TovarDetail.sh]
  static final sh =
      QueryStringProperty<TovarDetail>(_entities[0].properties[4]);

  /// see [TovarDetail.cod]
  static final cod =
      QueryStringProperty<TovarDetail>(_entities[0].properties[5]);

  /// see [TovarDetail.art]
  static final art =
      QueryStringProperty<TovarDetail>(_entities[0].properties[6]);

  /// see [TovarDetail.inPack]
  static final inPack =
      QueryIntegerProperty<TovarDetail>(_entities[0].properties[7]);
}

/// [ItemModel] entity fields to define ObjectBox queries.
class ItemModel_ {
  /// see [ItemModel.id]
  static final id = QueryIntegerProperty<ItemModel>(_entities[1].properties[0]);

  /// see [ItemModel.itemName]
  static final itemName =
      QueryStringProperty<ItemModel>(_entities[1].properties[1]);

  /// see [ItemModel.itemCount]
  static final itemCount =
      QueryIntegerProperty<ItemModel>(_entities[1].properties[2]);

  /// see [ItemModel.orderModel]
  static final orderModel =
      QueryRelationToOne<ItemModel, OrderModel>(_entities[1].properties[3]);

  /// see [ItemModel.sh]
  static final sh = QueryStringProperty<ItemModel>(_entities[1].properties[4]);

  /// see [ItemModel.uid]
  static final uid = QueryStringProperty<ItemModel>(_entities[1].properties[5]);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// see [OrderModel.id]
  static final id =
      QueryIntegerProperty<OrderModel>(_entities[2].properties[0]);

  /// see [OrderModel.ordered]
  static final ordered =
      QueryBooleanProperty<OrderModel>(_entities[2].properties[1]);

  /// see [OrderModel.dateDoc]
  static final dateDoc =
      QueryStringProperty<OrderModel>(_entities[2].properties[2]);

  /// see [OrderModel.user]
  static final user =
      QueryStringProperty<OrderModel>(_entities[2].properties[3]);

  /// see [OrderModel.isSend]
  static final isSend =
      QueryBooleanProperty<OrderModel>(_entities[2].properties[4]);
}

/// [WarehoseModel] entity fields to define ObjectBox queries.
class WarehoseModel_ {
  /// see [WarehoseModel.id]
  static final id =
      QueryIntegerProperty<WarehoseModel>(_entities[3].properties[0]);

  /// see [WarehoseModel.uid]
  static final uid =
      QueryStringProperty<WarehoseModel>(_entities[3].properties[1]);

  /// see [WarehoseModel.naim]
  static final naim =
      QueryStringProperty<WarehoseModel>(_entities[3].properties[2]);
}
