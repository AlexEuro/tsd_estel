// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'model/doc_inventory.dart';
import 'model/inventory_line.dart';
import 'model/products.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2608236799473055195),
      name: 'TovarDetail',
      lastPropertyId: const IdUid(6, 7966980451908002633),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1979316920461238032),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6077274265345614564),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9110578484844879930),
            name: 'naim',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8981876772377124508),
            name: 'ed',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7352432274802612791),
            name: 'sh',
            type: 9,
            flags: 34848,
            indexId: const IdUid(5, 834648737492683149)),
        ModelProperty(
            id: const IdUid(6, 7966980451908002633),
            name: 'cod',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 779602305377452646),
      name: 'DocInventoryModel',
      lastPropertyId: const IdUid(6, 7159551846309531715),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1702468698365113831),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 7742281343447018694),
            name: 'user',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7957323652803769430),
            name: 'dateDoc',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5249248727728571337),
      name: 'Inventory_line_Model',
      lastPropertyId: const IdUid(4, 1096679177713893303),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5043799978771810254),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3455739528122632240),
            name: 'itemCod',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2143224441419762221),
            name: 'itemCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1096679177713893303),
            name: 'docId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 6030873138007053335),
            relationTarget: 'DocInventoryModel')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 5249248727728571337),
      lastIndexId: const IdUid(6, 2284747289999665237),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        4381649715443723470,
        9177060019622415837,
        6041786632118251955,
        2284747289999665237
      ],
      retiredPropertyUids: const [
        4648902447497577875,
        8348316171775813125,
        7159551846309531715
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TovarDetail: EntityDefinition<TovarDetail>(
        model: _entities[0],
        toOneRelations: (TovarDetail object) => [],
        toManyRelations: (TovarDetail object) => {},
        getId: (TovarDetail object) => object.id,
        setId: (TovarDetail object, int id) {
          object.id = id;
        },
        objectToFB: (TovarDetail object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final naimOffset = fbb.writeString(object.naim);
          final edOffset = fbb.writeString(object.ed);
          final shOffset = fbb.writeString(object.sh);
          final codOffset = fbb.writeString(object.cod);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, naimOffset);
          fbb.addOffset(3, edOffset);
          fbb.addOffset(4, shOffset);
          fbb.addOffset(5, codOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TovarDetail(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              naim: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              ed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              sh: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              cod: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));

          return object;
        }),
    DocInventoryModel: EntityDefinition<DocInventoryModel>(
        model: _entities[1],
        toOneRelations: (DocInventoryModel object) => [],
        toManyRelations: (DocInventoryModel object) => {},
        getId: (DocInventoryModel object) => object.id,
        setId: (DocInventoryModel object, int id) {
          object.id = id;
        },
        objectToFB: (DocInventoryModel object, fb.Builder fbb) {
          final userOffset = fbb.writeString(object.user);
          final dateDocOffset = fbb.writeString(object.dateDoc);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, userOffset);
          fbb.addOffset(4, dateDocOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DocInventoryModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              dateDoc: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              user: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    Inventory_line_Model: EntityDefinition<Inventory_line_Model>(
        model: _entities[2],
        toOneRelations: (Inventory_line_Model object) => [object.doc],
        toManyRelations: (Inventory_line_Model object) => {},
        getId: (Inventory_line_Model object) => object.id,
        setId: (Inventory_line_Model object, int id) {
          object.id = id;
        },
        objectToFB: (Inventory_line_Model object, fb.Builder fbb) {
          final itemCodOffset = fbb.writeString(object.itemCod);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, itemCodOffset);
          fbb.addInt64(2, object.itemCount);
          fbb.addInt64(3, object.doc.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Inventory_line_Model()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..itemCod = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..itemCount =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.doc.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.doc.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TovarDetail] entity fields to define ObjectBox queries.
class TovarDetail_ {
  /// see [TovarDetail.id]
  static final id =
      QueryIntegerProperty<TovarDetail>(_entities[0].properties[0]);

  /// see [TovarDetail.uid]
  static final uid =
      QueryStringProperty<TovarDetail>(_entities[0].properties[1]);

  /// see [TovarDetail.naim]
  static final naim =
      QueryStringProperty<TovarDetail>(_entities[0].properties[2]);

  /// see [TovarDetail.ed]
  static final ed =
      QueryStringProperty<TovarDetail>(_entities[0].properties[3]);

  /// see [TovarDetail.sh]
  static final sh =
      QueryStringProperty<TovarDetail>(_entities[0].properties[4]);

  /// see [TovarDetail.cod]
  static final cod =
      QueryStringProperty<TovarDetail>(_entities[0].properties[5]);
}

/// [DocInventoryModel] entity fields to define ObjectBox queries.
class DocInventoryModel_ {
  /// see [DocInventoryModel.id]
  static final id =
      QueryIntegerProperty<DocInventoryModel>(_entities[1].properties[0]);

  /// see [DocInventoryModel.user]
  static final user =
      QueryStringProperty<DocInventoryModel>(_entities[1].properties[1]);

  /// see [DocInventoryModel.dateDoc]
  static final dateDoc =
      QueryStringProperty<DocInventoryModel>(_entities[1].properties[2]);
}

/// [Inventory_line_Model] entity fields to define ObjectBox queries.
class Inventory_line_Model_ {
  /// see [Inventory_line_Model.id]
  static final id =
      QueryIntegerProperty<Inventory_line_Model>(_entities[2].properties[0]);

  /// see [Inventory_line_Model.itemCod]
  static final itemCod =
      QueryStringProperty<Inventory_line_Model>(_entities[2].properties[1]);

  /// see [Inventory_line_Model.itemCount]
  static final itemCount =
      QueryIntegerProperty<Inventory_line_Model>(_entities[2].properties[2]);

  /// see [Inventory_line_Model.doc]
  static final doc =
      QueryRelationToOne<Inventory_line_Model, DocInventoryModel>(
          _entities[2].properties[3]);
}
